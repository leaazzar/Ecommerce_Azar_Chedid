import pytest
from unittest.mock import patch
from app import create_app, db
from models import Review

@pytest.fixture
def client():
    app = create_app()
    app.config['TESTING'] = True
    with app.test_client() as client:
        with app.app_context():
            db.create_all()
            yield client
            db.drop_all()

def test_missing_required_field(client):
    response = client.post('/reviews', json={"item_name": "Laptop"})
    assert response.status_code == 400
    assert response.json['error'] == "customer_username is required."

def test_invalid_rating(client):
    response = client.post('/reviews', json={
        "customer_username": "john_doe",
        "item_name": "Laptop",
        "rating": 10,
        "comment": "Great!"
    })
    assert response.status_code == 400
    assert response.json['error'] == "Rating must be an integer between 1 and 5."

@patch('routes.customer_exists', return_value=False)
def test_nonexistent_customer(mock_customer, client):
    response = client.post('/reviews', json={
        "customer_username": "nonexistent_user",
        "item_name": "Laptop",
        "rating": 5,
        "comment": "Great product!"
    })
    assert response.status_code == 404
    assert response.json['error'] == "Customer does not exist."

@patch('routes.item_exists', return_value=False)
def test_nonexistent_item(mock_item, client):
    response = client.post('/reviews', json={
        "customer_username": "john_doe",
        "item_name": "Nonexistent_Item",
        "rating": 5,
        "comment": "Great product!"
    })
    assert response.status_code == 404
    assert response.json['error'] == "Item does not exist."

def test_review_creation(client):
    response = client.post('/reviews', json={
        "customer_username": "john_doe",
        "item_name": "Laptop",
        "rating": 5,
        "comment": "Great product!"
    })
    assert response.status_code == 201
    assert 'review_id' in response.json
